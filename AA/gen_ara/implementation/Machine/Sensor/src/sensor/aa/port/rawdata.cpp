///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rawdata.cpp
/// SOFTWARE COMPONENT NAME           : RawData
/// GENERATED DATE                    : 2024-11-12 15:10:44
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sensor/aa/port/rawdata.h"
 
namespace deepracer
{
namespace service
{
namespace rawdata
{
namespace skeleton
{
 
SvRawDataSkeletonImpl::SvRawDataSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SvRawDataSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SENS", "PORT", ara::log::LogLevel::kVerbose))
    , m_RField{0U}
{
    // regist get handler, RField
    auto rfield_get_handler = [this]() {
        return GetRField();
    };
    RField.RegisterGetHandler(rfield_get_handler);
    
    // regist set handler, RField
    auto rfield_set_handler = [this](const fields::RField::FieldType& value) {
        return SetRField(value);
    };
    RField.RegisterSetHandler(rfield_set_handler);
}
 
ara::core::Future<SvRawDataSkeleton::RMethodOutput> SvRawDataSkeletonImpl::RMethod(const double& a, const deepracer::type::Arithmetic& arithmetic, const double& b)
{
    m_logger.LogVerbose() << "RawData::RMethod::Requested";
    
    RMethodOutput response;
    ara::core::Promise<RMethodOutput> promise;
    
    // put your logic
    
    promise.set_value(response);
    return promise.get_future();
}
 
ara::core::Future<fields::RField::FieldType> SvRawDataSkeletonImpl::GetRField()
{
    m_logger.LogVerbose() << "RawData::GetRField::Requested";
    
    ara::core::Promise<fields::RField::FieldType> promise;
    
    promise.set_value(m_RField);
    return promise.get_future();
}
 
ara::core::Future<fields::RField::FieldType> SvRawDataSkeletonImpl::SetRField(const fields::RField::FieldType& value)
{
    m_logger.LogVerbose() << "RawData::SetRField::Requested";
    
    ara::core::Promise<fields::RField::FieldType> promise;
    
    // set field value
    m_RField = value;
    
    promise.set_value(m_RField);
    return promise.get_future();
}
 
void SvRawDataSkeletonImpl::NotifyRField()
{
    auto notify = RField.Update(m_RField);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "RawData::NotifyRField::Update";
    }
    else
    {
        m_logger.LogError() << "RawData::NotifyRField::Update::" << notify.Error().Message();
    }
}
 
void SvRawDataSkeletonImpl::UpdateRField(const fields::RField::FieldType& value)
{
    m_RField = value;
}
 
} /// namespace skeleton
} /// namespace rawdata
} /// namespace service
} /// namespace deepracer

namespace sensor
{
namespace aa
{
namespace port
{
 
RawData::RawData()
    : m_logger(ara::log::CreateLogger("SENS", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_RLidarEventData{{0U, 0.0, 0.0, 0U}, {0U, 0.0, 0.0, 0U}, {0U, 0.0, 0.0, 0U}}
    , m_RCameraEventData{{0U, 0U}, {0U, 0U}, {0U, 0U}}
{
}
 
RawData::~RawData()
{
}
 
void RawData::Start()
{
    m_logger.LogVerbose() << "RawData::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"Sensor/AA/RawData"};
    m_interface = std::make_shared<deepracer::service::rawdata::skeleton::SvRawDataSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "RawData::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "RawData::Start::OfferService::" << offer.Error().Message();
    }
}
 
void RawData::Terminate()
{
    m_logger.LogVerbose() << "RawData::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "RawData::Terminate::StopOfferService";
}
 
void RawData::WriteDataRLidarEvent(const deepracer::service::rawdata::skeleton::events::RLidarEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_RLidarEventData = data;
}
 
void RawData::SendEventRLidarEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            auto send = m_interface->RLidarEvent.Send(m_RLidarEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "RawData::SendEventRLidarEventCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "RawData::SendEventRLidarEventCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RawData::SendEventRLidarEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    auto send = m_interface->RLidarEvent.Send(m_RLidarEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "RawData::SendEventRLidarEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "RawData::SendEventRLidarEventTriggered::Send::" << send.Error().Message();
    }
}
 
void RawData::SendEventRLidarEventTriggered(const deepracer::service::rawdata::skeleton::events::RLidarEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_RLidarEventData = data;
    auto send = m_interface->RLidarEvent.Send(m_RLidarEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "RawData::SendEventRLidarEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "RawData::SendEventRLidarEventTriggered::Send::" << send.Error().Message();
    }
}
 
void RawData::WriteDataRCameraEvent(const deepracer::service::rawdata::skeleton::events::RCameraEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_RCameraEventData = data;
}
 
void RawData::SendEventRCameraEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            auto send = m_interface->RCameraEvent.Send(m_RCameraEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "RawData::SendEventRCameraEventCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "RawData::SendEventRCameraEventCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RawData::SendEventRCameraEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    auto send = m_interface->RCameraEvent.Send(m_RCameraEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "RawData::SendEventRCameraEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "RawData::SendEventRCameraEventTriggered::Send::" << send.Error().Message();
    }
}
 
void RawData::SendEventRCameraEventTriggered(const deepracer::service::rawdata::skeleton::events::RCameraEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_RCameraEventData = data;
    auto send = m_interface->RCameraEvent.Send(m_RCameraEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "RawData::SendEventRCameraEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "RawData::SendEventRCameraEventTriggered::Send::" << send.Error().Message();
    }
}
 
void RawData::WriteValueRField(const deepracer::service::rawdata::skeleton::fields::RField::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateRField(value);
}
 
void RawData::NotifyFieldRFieldCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_interface->NotifyRField();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RawData::NotifyFieldRFieldTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->NotifyRField();
}
 
void RawData::NotifyFieldRFieldTriggered(const deepracer::service::rawdata::skeleton::fields::RField::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateRField(value);
    m_interface->NotifyRField();
}
 
} /// namespace port
} /// namespace aa
} /// namespace sensor
 
/// EOF