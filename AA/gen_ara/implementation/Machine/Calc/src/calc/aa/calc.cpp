///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : calc.cpp
/// SOFTWARE COMPONENT NAME           : Calc
/// GENERATED DATE                    : 2024-11-12 15:53:00
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "calc/aa/calc.h"
#include <vector>
#include <cmath>
#include <utility>
#include <random>

#define DEBUG 1

#if DEBUG
    #define DEBUG_LOG(x) x
#else
    #define DEBUG_LOG(x)
#endif

std::pair<float, float> runModel(const std::vector<float>& lidar_data, const std::vector<float>& camera_data);
void initializeModelOnce();
 
namespace calc
{
namespace aa
{
 
/**
 * Calc::Calc() - Constructor for Calc class.
 *
 * Initializes the Calc class, setting up the logger and worker thread pool.
 */
Calc::Calc()
    : m_running(false), m_event_flag(false)
    , m_logger(ara::log::CreateLogger("CALC", "SWC", ara::log::LogLevel::kVerbose))
    , m_workers(2)
{
}
 
 /**
 * Calc::~Calc() - Destructor for Calc class.
 *
 * Ensures that the Calc instance is properly cleaned up.
 */
Calc::~Calc()
{
}

/**
 * Calc::Initialize() - Initializes the Calc component.
 *
 * Initializes the ControlData and RawData instances and prepares the component.
 *
 * Context: Process context. 
 * Return: 
 * * true if initialization is successful.
 */
bool Calc::Initialize()
{
    printf("[Calc::Initialize] Begin\n");
    m_logger.LogVerbose() << "Calc::Initialize";
    
    bool init{true};

    m_ControlData = std::make_shared<calc::aa::port::ControlData>();
    m_RawData = std::make_shared<calc::aa::port::RawData>();
    
    printf("[Calc::Initialize] Begin\n");
    return init;
}
 
void Calc::Start()
{
    m_logger.LogVerbose() << "Calc::Start";
    
    m_ControlData->Start();
    m_RawData->Start();
    m_running = true;
    // run software component
    DEBUG_LOG(m_logger.LogInfo() << "----------------Calc Start----------------";)
    Run();
}
 
void Calc::Terminate()
{
    m_logger.LogVerbose() << "Calc::Terminate";
    m_running = false;
    m_ControlData->Terminate();
    m_RawData->Terminate();
    m_event_flag = false;
}
 
void Calc::Run()
{
    m_running = true;
    m_logger.LogVerbose() << "Calc::Run";
    
    m_workers.Async([this] { ThrowEventCyclic(); });
    m_workers.Async([this] { TaskReceiveREventCyclic(); });

    m_workers.Wait();
}
 
void Calc::TaskReceiveREventCyclic()
{
    // init model;
    initializeModelOnce();
    m_RawData->SetReceiveEventREventHandler([this](const auto& sample)
    {
        OnReceiveREvent(sample);
    });
    m_RawData->ReceiveEventREventCyclic();
}

/**
 * Calc::OnReceiveREvent() - Handles received REvents.
 * @sample: The received sample containing lidar and camera data.
 *
 * Processes the received lidar data by extracting, interpolating, and 
 * preparing it for model inference. The model’s output is converted 
 * to control commands and sent to the actuator.
 *
 * Context: Called within event handling context.
 */

void Calc::OnReceiveREvent(const deepracer::service::rawdata::proxy::events::REvent::SampleType& sample)
{
    std::vector<float> processed_lidar;
    std::vector<float> processed_camera(120 * 160 * 2);
    
    bool result = true;

    result = PreProcessLidarData(sample, &processed_lidar);
    result = PreProcessCameraData(sample, &processed_camera);

    if (!result) {
        printf("[Calc::OnReceiveREvent] ERROR : Fail to preprocess Datas\n");
        return;
    }

    std::pair<float, float> prediction = runModel(processed_lidar, processed_camera);
    std::pair<float, float> processed_ai = ConvertValueFromPredictToServo(prediction);

    UpdateSteeringData(processed_ai);
}

bool Calc::PreProcessLidarData(const deepracer::service::rawdata::proxy::events::REvent::SampleType& sample, std::vector<float>* processed_data) {
    bool result = true;
    float start_degree = 0.0;
    float end_degree = 360.0;
    deepracer::type::lidars processed_lidars;

    result = GetFrontLidarData(start_degree, end_degree, sample.lidars, &processed_lidars);
    if (!result) {
        return result;
    }

    result = InterpolateLidarData(&processed_lidars); // Calibrate 0 value
    if (!result) {
        return result;
    }
    
    std::vector<float> result_lidar_left;
    std::vector<float> result_lidar_right;
    
    result_lidar_left = Extract4PointsForAI(0, 150, &processed_lidars);
    result_lidar_right = Extract4PointsForAI(210, 360, &processed_lidars);

    if (result_lidar_left.size() != 4 || result_lidar_right.size() != 4) {
        return result;
    }

    std::reverse(result_lidar_left.begin(), result_lidar_left.end());
    std::reverse(result_lidar_right.begin(), result_lidar_right.end());

    processed_data->insert(processed_data->end(), result_lidar_left.begin(), result_lidar_left.end());
    processed_data->insert(processed_data->end(), result_lidar_right.begin(), result_lidar_right.end());

    return result;
}

bool Calc::PreProcessCameraData(const deepracer::service::rawdata::proxy::events::REvent::SampleType& sample, std::vector<float>* processed_data) {
    bool result = true;

    for (int i = 0 ; i < 19200 ; i ++) {
        (*processed_data)[i] = sample.left_camera[i];
        (*processed_data)[i + 19200] = sample.right_camera[i];
    }

    return result;
}

/**
 * Calc::GetFrontLidarData() - Filters lidar data within a specific angle range.
 * @start_degree: The starting angle in degrees.
 * @end_degree: The ending angle in degrees.
 * @before_lidar: The input lidar data to be filtered.
 * @after_lidar: The output lidar data after filtering.
 *
 * Filters lidar data based on the specified start and end angles, storing 
 * the results in @after_lidar.
 *
 * Return: true if filtering is successful.
 */
bool Calc::GetFrontLidarData(float start_degree, float end_degree, const deepracer::type::lidars before_lidar, deepracer::type::lidars* after_lidar) {
    for (auto& itr : before_lidar) {
        if ( (itr.theta >= start_degree) && (itr.theta <= end_degree) ) {
            after_lidar->push_back(itr);
        }
    }
    return true;
}

/**
 * Calc::InterpolateLidarData() - Interpolates missing lidar distance data.
 * @lidar_datas: Pointer to the lidar data to be interpolated.
 *
 * Interpolates missing distance values in lidar data by averaging the
 * neighboring valid values. Helps to fill in zero values in the data.
 *
 * Return: true if interpolation is successful.
 */
bool Calc::InterpolateLidarData(deepracer::type::lidars* lidar_datas) {
    for (size_t i = 1; i < lidar_datas->size() - 1; ++i) {
        if (lidar_datas->at(i).dist == 0) {
            size_t prev = i - 1;
            size_t next = i + 1;
            while (next < lidar_datas->size() && (lidar_datas->at(next).dist == 0 )) {
                ++next;
            }
            if (next < lidar_datas->size()) {
                lidar_datas->at(i).dist = (lidar_datas->at(prev).dist + lidar_datas->at(next).dist) / 2;
            } else {
                lidar_datas->at(i).dist = lidar_datas->at(prev).dist; // Handle edge case if no valid next value
            }
        }
    }
    return true;
}

std::vector<float> Calc::Extract4PointsForAI(float start_degree, float end_degree, deepracer::type::lidars* lidar_datas) {
    std::vector<float> result;

    // 중간 지점과 각도를 계산
    float mid_degree = (start_degree + end_degree) / 2.0f;
    float interval = (end_degree - start_degree) / 4.0f;

    // 각 구간의 평균 거리값을 계산
    for (int i = 0; i < 4; ++i) {
        float lower_bound = start_degree + i * interval;
        float upper_bound = start_degree + (i + 1) * interval;

        std::vector<float> distances;
        
        for (auto& itr : *lidar_datas) {
            if ( (itr.theta >= lower_bound) && (itr.theta < upper_bound) ) {
                distances.push_back(itr.dist);
            }
        }

        if (!distances.empty()) {
            float sum = std::accumulate(distances.begin(), distances.end(), 0.0f);
            float avg = sum / distances.size();
            avg = (avg > 2000.0) ? 2000.0 : avg;
            result.push_back(avg);
        } else {
            result.push_back(0.0f); // 해당 구간에 데이터가 없을 경우 기본값 0.0을 사용
        }
    }
    
    for (int idx = 0 ; idx < 4 ; idx ++) {
        result[idx] = (result[idx] <= 1200.0 ) ? 1.0 : 0.0;
    }

    return result;
}

void Calc::UpdateSteeringData(std::pair<float, float> steerDatas)
{
    deepracer::service::controldata::skeleton::events::CEvent::SampleType controlData;
    controlData.cur_angle = steerDatas.first;
    controlData.cur_speed = steerDatas.second;
    m_ControlData->WriteDataCEvent(controlData);

    std::lock_guard<std::mutex> lock(m_mutex);
    m_event_flag = true;
}

std::pair<float, float> Calc::ConvertValueFromPredictToServo(std::pair<float, float> predictions) {
    std::pair<float, float> processed_ai;
    //Step1 . Convert Degree data (0.0 ~ 1.0 => -40 ~ 40);
    float angle = (predictions.first - 0.5) * 2; // -1.0 ~ 1.0
    angle = (fabs(angle) < 0.04) ? 0 : angle * 30;
    angle = (angle > 1.0) ? (1.0) : (angle < -1.0) ? -1.0 : angle;

    //Step2. Convert Speed data (0.0 ~ 1.0 => )
    float degree = (predictions.first) * 40;
    float speed = predictions.second * GetMaxSpeed(degree);
    speed = (speed > 1.0) ? 1.0 : speed;

    processed_ai.first = angle;
    processed_ai.second = speed;

    return processed_ai;
}

float Calc::GetMaxSpeed(float degree) {
    float max_speed = 0.0;
    int deg = static_cast<int>(round(degree / 5)) * 5;  // 5단위로 변경
    
    switch (deg) {
        case 40 :
        case -40 :
            max_speed = 0.5;
            break;
        case 35 :
        case -35 :
            max_speed = 0.7;
            break;
        case 30 :
        case -30 :
            max_speed = 0.9;
            break;
        case 25 :
        case -25 :
            max_speed = 1.2;
            break;
        case 20 :
        case -20 :
            max_speed = 1.5;
            break;
        case 15 :
        case -15:
            max_speed = 2.0;
            break;
        case 10 :
        case -10:
            max_speed = 2.5;
            break;
        case 5 :
        case -5:
            max_speed = 3.0;
            break;
        case 0 :
            max_speed = 3.5;
            break;
        default:
            break;
    }

    return max_speed;
}

void Calc::ThrowEventCyclic() {
    while (m_running) {
        if (m_event_flag == true) {
            std::lock_guard<std::mutex> lock(m_mutex);;

            m_ControlData->SendEventCEventTriggered();
            m_event_flag = false;
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

} /// namespace aa
} /// namespace calc



