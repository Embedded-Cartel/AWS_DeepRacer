///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : actuator.cpp
/// SOFTWARE COMPONENT NAME           : Actuator
/// GENERATED DATE                    : 2024-11-12 15:53:00
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "actuator/aa/actuator.h"
#include <cmath> // Add for use 'fasb'

#define DEBUG 1

#ifdef DEBUG
    #define DEBUG_LOG(x) x
#else
    #define DEBUG_LOG(x)
#endif
 
namespace actuator
{
namespace aa
{
Actuator::Actuator()
    : m_logger(ara::log::CreateLogger("ACTR", "SWC", ara::log::LogLevel::kVerbose))
    , m_workers(1)
{
}
 
Actuator::~Actuator()
{
    m_servo_driver->servoSubscriber(0, 0);
}
 
bool Actuator::Initialize()
{
    m_logger.LogVerbose() << "Actuator::Initialize";
    
    bool init{true};
    
    m_ControlData = std::make_shared<actuator::aa::port::ControlData>();

    m_servo_driver = std::make_shared<PWM::ServoDriver>();
    m_led_driver = std::make_shared<PWM::LedDriver>();

    ServoCalibration(); // Set Servo Calibration
    MotorCalibration(); // Set Motor Calibration

    return init;
}
 
void Actuator::Start()
{
    m_logger.LogVerbose() << "Actuator::Start";
    
    m_ControlData->Start();
    
    // run software component
    Run();
}
 
void Actuator::Terminate()
{
    m_logger.LogVerbose() << "Actuator::Terminate";
    
    m_ControlData->Terminate();
}
 
void Actuator::Run()
{
    m_logger.LogVerbose() << "Actuator::Run";
    
    m_workers.Async([this] { TaskReceiveCEventCyclic(); });
    
    m_workers.Wait();
}

void Actuator::TaskReceiveCEventCyclic()
{
    m_ControlData->SetReceiveEventCEventHandler([this](const auto& sample)
    {
        OnReceiveCEvent(sample);
    });
    m_ControlData->ReceiveEventCEventCyclic();
}

void Actuator::OnReceiveCEvent(const deepracer::service::controldata::proxy::events::CEvent::SampleType& sample)
{
    float speed, angle;

    m_logger.LogInfo() << "Actuator::OnReceiveCEvent:" << sample.cur_speed << ", " << sample.cur_angle;
    DEBUG_LOG(printf("#################### Sample angle : %.8f ####################\n", sample.cur_angle));
    DEBUG_LOG(printf("#################### Sample speed : %.8f ####################\n", sample.cur_speed));

    angle = sample.cur_angle;
    speed = SpeedMapping(sample, 0, 1.0, 0.64, 0.72);

    DEBUG_LOG(printf("#################### mapping angle : %.8f ####################\n", angle));
    DEBUG_LOG(printf("#################### mapping speed : %.8f ####################\n", speed));

    m_servo_driver->servoSubscriber(speed, angle);
}

void Actuator::ServoCalibration()
{
    int cal_type = 0;
    int servo_min;
    int servo_mid;
    int servo_max;
    int servo_polarity;

    m_servo_driver->getCalibrationValue(cal_type, &servo_min, &servo_mid, &servo_max, &servo_polarity);
    m_servo_driver->setCalibrationValue(cal_type, servo_min, servo_mid, servo_max, servo_polarity);
}

void Actuator::MotorCalibration()
{
    int cal_type = 1;
    int motor_min;
    int motor_mid;
    int motor_max;
    int motor_polarity;

    m_servo_driver->getCalibrationValue(cal_type, &motor_min, &motor_mid, &motor_max, &motor_polarity);
    m_servo_driver->setCalibrationValue(cal_type, motor_min, motor_mid, motor_max, motor_polarity);
}

/**
 * Actuator::SpeedMapping - Maps the input speed to a scaled output speed
 * @sample: The sample data containing the current angle and speed
 * @in_min: The minimum input speed for scaling
 * @in_max: The maximum input speed for scaling
 * @out_min: The minimum output speed for scaling
 * @out_max: The maximum output speed for scaling
 *
 * This function scales the input speed to a corresponding output speed
 * based on the specified input and output ranges.
 * 
 * Return:
 *  The scaled output speed based on the input speed and range, 
 *  or the specified bounds (out_min/out_max) in edge cases.
 */
float Actuator::SpeedMapping(const deepracer::service::controldata::proxy::events::CEvent::SampleType& sample, 
		float in_min, float in_max, float out_min, float out_max)
{
    /*
     * If the absolute value of cur_angle is 0.65 or greater, 
     * it returns the minimum speed at which the vehicle can move autonomously 
     * without stopping to ensure smooth curve driving
     */
    if(fabs(sample.cur_angle) >= 0.65) {
        return out_min;
    }

    if(sample.cur_speed < in_min || sample.cur_speed > in_max) {
        m_logger.LogError() << "Actuaotr::SpeedMapping:" << sample.cur_speed;
	    return out_max;
    }

    return (((sample.cur_speed - in_min) * (out_max - out_min)) / (in_max - in_min)) + out_min;
}
 
} /// namespace aa
} /// namespace actuator
